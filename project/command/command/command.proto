syntax = "proto3";

option go_package = "github.com/Lxb921006/Gin-bms/project/command;command";

package command;

service FileTransferService {
  rpc SendFile(stream FileMessage) returns (stream FileMessage) {}
}

message FileMessage {
  bytes byte = 1;
  string name = 2;
  string ip = 3;
}

service StreamUpdateProgramService {
  rpc DockerUpdate (StreamRequest) returns (stream StreamReply) {}
  rpc JavaUpdate (StreamRequest) returns (stream StreamReply) {}
  rpc DockerReload (StreamRequest) returns (stream StreamReply) {}
  rpc JavaReload (StreamRequest) returns (stream StreamReply) {}
  rpc JavaUpdateLog (StreamRequest) returns (stream StreamReply) {}
  rpc DockerUpdateLog (StreamRequest) returns (stream StreamReply) {}
  rpc RunLinuxCmd (StreamRequest) returns (stream StreamReply) {}
}


// The request message containing the user's name. 1代表的是id在一个message 里边是唯一的, 不能重复
message StreamRequest {
  string uuid = 1;
  string cmd = 2;
  string ip =3;
}

service StreamCheckSystemLogService {
  rpc CheckSystemLog (StreamSystemLogRequest) returns (stream StreamReply) {}
}

message StreamSystemLogRequest {
  string logName = 2;
  string start = 3;
  string end = 4;
  string field = 5;
}

service ClusterOperateService {
  rpc ClusterInit(StreamClusterOperateReq) returns (stream StreamClusterOperateResp) {} //初始化集群，创建
  rpc ClusterJoinWork(StreamClusterOperateReq) returns (stream StreamClusterOperateResp) {} // 添加到集群
  rpc ClusterJoinMaster(StreamClusterOperateReq) returns (stream StreamClusterOperateResp) {} // 添加到集群
  rpc ClusterLeaveSwarm(StreamClusterOperateReq) returns (stream StreamClusterOperateResp) {} // 退出集群
  rpc ClusterRemoveSwarm(StreamClusterOperateReq) returns (stream StreamClusterOperateResp) {} // 删除集群
  rpc StartClusterMonitor(StreamClusterOperateReq) returns (stream StreamClusterOperateResp) {} // 删除集群
}

message StreamClusterOperateReq {
 string masterIp = 1;
 string wToken = 2;
 string mToken = 3;
 string nodeIp = 4;
 string clusterID = 5;
}

message StreamClusterOperateResp {
  string clusterID = 1;
  string wToken = 2;
  string mToken = 3;
  string message =4;
  string ip = 5;
  int32 code = 6;
}

// The response message containing the greetings
message StreamReply {
  string message = 1;
}

message ReqToken {
  string user = 1;
  string token = 2;
}

// 最后执行：protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative command.proto
// https://doc.oschina.net/ grpc文档
// https://github.com/grpc/grpc-go