// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: command.proto

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_SendFileClient, error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], "/command.FileTransferService/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceSendFileClient{stream}
	return x, nil
}

type FileTransferService_SendFileClient interface {
	Send(*FileMessage) error
	Recv() (*FileMessage, error)
	grpc.ClientStream
}

type fileTransferServiceSendFileClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceSendFileClient) Send(m *FileMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferServiceSendFileClient) Recv() (*FileMessage, error) {
	m := new(FileMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility
type FileTransferServiceServer interface {
	SendFile(FileTransferService_SendFileServer) error
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServiceServer struct {
}

func (UnimplementedFileTransferServiceServer) SendFile(FileTransferService_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).SendFile(&fileTransferServiceSendFileServer{stream})
}

type FileTransferService_SendFileServer interface {
	Send(*FileMessage) error
	Recv() (*FileMessage, error)
	grpc.ServerStream
}

type fileTransferServiceSendFileServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceSendFileServer) Send(m *FileMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferServiceSendFileServer) Recv() (*FileMessage, error) {
	m := new(FileMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _FileTransferService_SendFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "command.proto",
}

// StreamUpdateProcessServiceClient is the client API for StreamUpdateProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamUpdateProcessServiceClient interface {
	DockerUpdate(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_DockerUpdateClient, error)
	JavaUpdate(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_JavaUpdateClient, error)
	DockerReload(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_DockerReloadClient, error)
	JavaReload(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_JavaReloadClient, error)
	JavaUpdateLog(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_JavaUpdateLogClient, error)
	DockerUpdateLog(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_DockerUpdateLogClient, error)
}

type streamUpdateProcessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamUpdateProcessServiceClient(cc grpc.ClientConnInterface) StreamUpdateProcessServiceClient {
	return &streamUpdateProcessServiceClient{cc}
}

func (c *streamUpdateProcessServiceClient) DockerUpdate(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_DockerUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamUpdateProcessService_ServiceDesc.Streams[0], "/command.StreamUpdateProcessService/DockerUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamUpdateProcessServiceDockerUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamUpdateProcessService_DockerUpdateClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamUpdateProcessServiceDockerUpdateClient struct {
	grpc.ClientStream
}

func (x *streamUpdateProcessServiceDockerUpdateClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamUpdateProcessServiceClient) JavaUpdate(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_JavaUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamUpdateProcessService_ServiceDesc.Streams[1], "/command.StreamUpdateProcessService/JavaUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamUpdateProcessServiceJavaUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamUpdateProcessService_JavaUpdateClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamUpdateProcessServiceJavaUpdateClient struct {
	grpc.ClientStream
}

func (x *streamUpdateProcessServiceJavaUpdateClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamUpdateProcessServiceClient) DockerReload(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_DockerReloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamUpdateProcessService_ServiceDesc.Streams[2], "/command.StreamUpdateProcessService/DockerReload", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamUpdateProcessServiceDockerReloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamUpdateProcessService_DockerReloadClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamUpdateProcessServiceDockerReloadClient struct {
	grpc.ClientStream
}

func (x *streamUpdateProcessServiceDockerReloadClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamUpdateProcessServiceClient) JavaReload(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_JavaReloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamUpdateProcessService_ServiceDesc.Streams[3], "/command.StreamUpdateProcessService/JavaReload", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamUpdateProcessServiceJavaReloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamUpdateProcessService_JavaReloadClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamUpdateProcessServiceJavaReloadClient struct {
	grpc.ClientStream
}

func (x *streamUpdateProcessServiceJavaReloadClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamUpdateProcessServiceClient) JavaUpdateLog(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_JavaUpdateLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamUpdateProcessService_ServiceDesc.Streams[4], "/command.StreamUpdateProcessService/JavaUpdateLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamUpdateProcessServiceJavaUpdateLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamUpdateProcessService_JavaUpdateLogClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamUpdateProcessServiceJavaUpdateLogClient struct {
	grpc.ClientStream
}

func (x *streamUpdateProcessServiceJavaUpdateLogClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamUpdateProcessServiceClient) DockerUpdateLog(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamUpdateProcessService_DockerUpdateLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamUpdateProcessService_ServiceDesc.Streams[5], "/command.StreamUpdateProcessService/DockerUpdateLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamUpdateProcessServiceDockerUpdateLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamUpdateProcessService_DockerUpdateLogClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamUpdateProcessServiceDockerUpdateLogClient struct {
	grpc.ClientStream
}

func (x *streamUpdateProcessServiceDockerUpdateLogClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamUpdateProcessServiceServer is the server API for StreamUpdateProcessService service.
// All implementations must embed UnimplementedStreamUpdateProcessServiceServer
// for forward compatibility
type StreamUpdateProcessServiceServer interface {
	DockerUpdate(*StreamRequest, StreamUpdateProcessService_DockerUpdateServer) error
	JavaUpdate(*StreamRequest, StreamUpdateProcessService_JavaUpdateServer) error
	DockerReload(*StreamRequest, StreamUpdateProcessService_DockerReloadServer) error
	JavaReload(*StreamRequest, StreamUpdateProcessService_JavaReloadServer) error
	JavaUpdateLog(*StreamRequest, StreamUpdateProcessService_JavaUpdateLogServer) error
	DockerUpdateLog(*StreamRequest, StreamUpdateProcessService_DockerUpdateLogServer) error
	mustEmbedUnimplementedStreamUpdateProcessServiceServer()
}

// UnimplementedStreamUpdateProcessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamUpdateProcessServiceServer struct {
}

func (UnimplementedStreamUpdateProcessServiceServer) DockerUpdate(*StreamRequest, StreamUpdateProcessService_DockerUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerUpdate not implemented")
}
func (UnimplementedStreamUpdateProcessServiceServer) JavaUpdate(*StreamRequest, StreamUpdateProcessService_JavaUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method JavaUpdate not implemented")
}
func (UnimplementedStreamUpdateProcessServiceServer) DockerReload(*StreamRequest, StreamUpdateProcessService_DockerReloadServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerReload not implemented")
}
func (UnimplementedStreamUpdateProcessServiceServer) JavaReload(*StreamRequest, StreamUpdateProcessService_JavaReloadServer) error {
	return status.Errorf(codes.Unimplemented, "method JavaReload not implemented")
}
func (UnimplementedStreamUpdateProcessServiceServer) JavaUpdateLog(*StreamRequest, StreamUpdateProcessService_JavaUpdateLogServer) error {
	return status.Errorf(codes.Unimplemented, "method JavaUpdateLog not implemented")
}
func (UnimplementedStreamUpdateProcessServiceServer) DockerUpdateLog(*StreamRequest, StreamUpdateProcessService_DockerUpdateLogServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerUpdateLog not implemented")
}
func (UnimplementedStreamUpdateProcessServiceServer) mustEmbedUnimplementedStreamUpdateProcessServiceServer() {
}

// UnsafeStreamUpdateProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamUpdateProcessServiceServer will
// result in compilation errors.
type UnsafeStreamUpdateProcessServiceServer interface {
	mustEmbedUnimplementedStreamUpdateProcessServiceServer()
}

func RegisterStreamUpdateProcessServiceServer(s grpc.ServiceRegistrar, srv StreamUpdateProcessServiceServer) {
	s.RegisterService(&StreamUpdateProcessService_ServiceDesc, srv)
}

func _StreamUpdateProcessService_DockerUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamUpdateProcessServiceServer).DockerUpdate(m, &streamUpdateProcessServiceDockerUpdateServer{stream})
}

type StreamUpdateProcessService_DockerUpdateServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamUpdateProcessServiceDockerUpdateServer struct {
	grpc.ServerStream
}

func (x *streamUpdateProcessServiceDockerUpdateServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamUpdateProcessService_JavaUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamUpdateProcessServiceServer).JavaUpdate(m, &streamUpdateProcessServiceJavaUpdateServer{stream})
}

type StreamUpdateProcessService_JavaUpdateServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamUpdateProcessServiceJavaUpdateServer struct {
	grpc.ServerStream
}

func (x *streamUpdateProcessServiceJavaUpdateServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamUpdateProcessService_DockerReload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamUpdateProcessServiceServer).DockerReload(m, &streamUpdateProcessServiceDockerReloadServer{stream})
}

type StreamUpdateProcessService_DockerReloadServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamUpdateProcessServiceDockerReloadServer struct {
	grpc.ServerStream
}

func (x *streamUpdateProcessServiceDockerReloadServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamUpdateProcessService_JavaReload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamUpdateProcessServiceServer).JavaReload(m, &streamUpdateProcessServiceJavaReloadServer{stream})
}

type StreamUpdateProcessService_JavaReloadServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamUpdateProcessServiceJavaReloadServer struct {
	grpc.ServerStream
}

func (x *streamUpdateProcessServiceJavaReloadServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamUpdateProcessService_JavaUpdateLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamUpdateProcessServiceServer).JavaUpdateLog(m, &streamUpdateProcessServiceJavaUpdateLogServer{stream})
}

type StreamUpdateProcessService_JavaUpdateLogServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamUpdateProcessServiceJavaUpdateLogServer struct {
	grpc.ServerStream
}

func (x *streamUpdateProcessServiceJavaUpdateLogServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamUpdateProcessService_DockerUpdateLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamUpdateProcessServiceServer).DockerUpdateLog(m, &streamUpdateProcessServiceDockerUpdateLogServer{stream})
}

type StreamUpdateProcessService_DockerUpdateLogServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamUpdateProcessServiceDockerUpdateLogServer struct {
	grpc.ServerStream
}

func (x *streamUpdateProcessServiceDockerUpdateLogServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

// StreamUpdateProcessService_ServiceDesc is the grpc.ServiceDesc for StreamUpdateProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamUpdateProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.StreamUpdateProcessService",
	HandlerType: (*StreamUpdateProcessServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DockerUpdate",
			Handler:       _StreamUpdateProcessService_DockerUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JavaUpdate",
			Handler:       _StreamUpdateProcessService_JavaUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerReload",
			Handler:       _StreamUpdateProcessService_DockerReload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JavaReload",
			Handler:       _StreamUpdateProcessService_JavaReload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JavaUpdateLog",
			Handler:       _StreamUpdateProcessService_JavaUpdateLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerUpdateLog",
			Handler:       _StreamUpdateProcessService_DockerUpdateLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "command.proto",
}
